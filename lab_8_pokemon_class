import random, check_input, abc

class Pokemon(abc.ABC):
  """ An abstract Pokemon class. Representing the moves and health of the Pokemon, through attacking moves. """

  def __init__(self, name, type):
    """ Initializes the name, type, hp, and battle table of the pokemon. """
    self._battle_table = [[1, .5, 2], [2, 1, .5], [.5, 2, 1]]
    self._name = name
    self._type = type
    self._hp = 25 #this needs to use a decorator to get the value not set it 

  @property
  def hp(self):
    """ Accessing the hp property. """
    return self._hp
  
  def get_normal_menu(self):
    return check_input.get_int_range("\nChoose a Move:\n1. Slam\n2. Tackle\nEnter move: ", 1, 2)

  def _normal_move(self, opponent, move):
    """ Chooses to either call slam or tackle method. """
    if move == 1:
      return self._slam(opponent)
    elif move == 2:
      return self._tackle(opponent)

  def _slam(self, opponent):
    """ Slam damage to opponent's pokemon. """
    dmg = random.randint(1, 8)
    opponent._take_damage(dmg)
    return (self._name + " SLAMS " + opponent._name + " for " + str(dmg) + " damage.")

  def _tackle(self, opponent):
    """ Tackle damage to opponent's pokemon. """
    dmg = random.randint(3, 6)
    opponent._take_damage(dmg)
    return (self._name + " TACKLES " + opponent._name + " for "  + str(dmg) + " damage.")

  @abc.abstractmethod
  def get_special_menu(self):
    """ The special move menu. """
    pass

  @abc.abstractmethod
  def _special_move(self, opponent, move):
    """ The pokemon's special moves. """
    pass

  def attack(self, opponent, type, move):
    """ Determines whether the pokemon attack with normal or special moves. """
    if move == 1:
      attack = self.get_normal_menu()
      print()
      print(self._normal_move(opponent, attack))
    elif move == 2:
      attack = self.get_special_menu()
      print()
      print(self._special_move(opponent, attack))

  def __str__(self):
    """ Displays the pokemon's name and hp. """
    return self._name + " HP: " + str(self._hp) + "/25"

  def _take_damage(self, dmg):
    """ Updates the hp from the damage taken. """
    self._hp = self._hp - int(dmg)
    if self._hp < 0:
      self._hp = 0
